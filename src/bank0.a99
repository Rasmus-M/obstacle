***************************************************************
*
* Bank 0
*
       aorg >6000,0

***************************************************************
*
* Cartridge header
*
       byte >AA,1,1,0
       data 0
       data program
       data 0,0
program:
       data 0
       data main
       byte 15
       text 'OBSTACLE COURSE'

***************************************************************
*
* Main program
*
main:
       seto @bank_0
       limi 0                          ; Interrupts off
       lwpi wrksp                      ; Setup workspace
       li   r10,stack                  ; Setup stack pointer
       bl   @one_time_init
       bl   @init_game
new_game:
       bl   @intro
       bl   @init_game
new_level:
       li   r0,ready
       bl   @speak
       bl   @init_level
       bl   @main_loop
       mov  @status,r0
       jlt  lost_life
       li   r0,finish
       bl   @speak
       inc  @level
       jmp  new_level
lost_life:
       dec  @lives
       jne  new_level
*      Game over
       li   r0,21*32+6
       li   r1,txt_game_over
       bl   @display_text
       jmp  new_game

*********************************************************************
*
* One time initializations
*
one_time_init:
       .proc
       li   r14,vdprd                  ; Do not change
       li   r15,vdpwd                  ; Do not change
*      Trampoline code
       li   r0,bank_0_exec_code
       li   r1,bank_0_exec
       li   r2,bank_1_exec_code_end-bank_0_exec_code
       bl   @copy
*      Graphics mode
       bl   @graphics_mode
       .endproc
*// one_time_init

*********************************************************************
*
* Display intro
*
intro:
       .proc
       .push @level                    ; Save level reached
       clr  @level                     ; Intro is level 0
       bl   @init_level
       .pop @level                     ; Restore level reached (for display)
       bl   @display_level
       clr  @ball_x
       li   r0,>0180
       mov  r0,@ball_vx
       li   r0,>1000
       mov  r0,@ball_y
*      Scroll intro screen
       li   r0,257
       mov  r0,@frame
       seto @demo
       seto @status
       bl   @main_loop
*      S'
       li   r0,ptrntb+95*8
       li   r1,char_s_apo
       li   r2,8
       bl   @vmbw
       li   r0,3*32+31+nametb
       li   r1,95*256
       bl   @vsbw
*      Move ball on
       li   r0,80
       mov  r0,@frame
       li   r0,>029a
       mov  r0,@ball_vx
intro_0:
       bl   @vsync
       bl   @upload_sprites
       bl   @move_ball
       bl   @module_player
       dec  @frame
       jne  intro_0
*      Text
       li   r9,47
intro_1:
       li   r7,txt_title
       li   r8,4
intro_2:
       mov  r9,@frame
       bl   @wait
       tb   0
       jne  intro_3
       li   r0,21*32+6
       mov  r7,r1
       bl   @display_text
       ai   r7,20
       li   r9,192
       dec  r8
       jne  intro_2
       jmp  intro_1
intro_3:
       li   r0,21*32+6
       li   r1,txt_title
       bl   @display_text
       .endproc
*// intro

***************************************************************
*
* Initialize game
*
init_game:
       li   r0,start_level
       mov  r0,@level
       clr  @score
       seto @disp_score
       li   r0,n_lives
       mov  r0,@lives
       rt
*// init_game

***************************************************************
*
* Initialize level
*
init_level:
       .proc
*      Screen off
       li   r0,>01a2
       bl   @vwtr
*      Mute sound
       bl   @mute_sound
*      Scratch pad variables
       li   r0,disp_score
       li   r2,bank_0_exec-disp_score
       bl   @clear
*      Modified level
       mov  @level,r1
       jeq  init_level_1
       dec  r1
       andi r1,n_levels-1
       inc  r1
init_level_1:
       mov  r1,@mod_level
*      Enemy list pointer
       sla  r1,1
       mov  @enemy_lists(r1),@enemy_list_ptr
*      Ball variables
       li   r0,ball_init_data
       mov  *r0+,@ball_x
       mov  *r0+,@ball_y
       mov  *r0+,@ball_ay
       mov  *r0+,@ball_pattern_color
       mov  *r0+,@ball_pattern_color_offset
*      Scroll speed
       li   r0,scroll_speed_normal
       mov  r0,@scroll_vx
*      Setup display
       li   r13,copy_map_to_vdp_bank1
       bl   @bank_1_exec
       bl   @scroll_patterns
       bl   @read_grom_chars
       bl   @update_full_name_table
       li   r0,23*32+1
       li   r1,txt_stats
       bl   @display_text
       bl   @display_level
       bl   @display_lives
*      Sprite patterns
       li   r13,upload_sprite_patterns_bank1
       bl   @bank_1_exec
*      Sprite attributes
       li   r0,spratb
       li   r1,>d000
       bl   @vsbw
*      Music
       li   r0,obstacles_module
       bl   @play_module
*      Screen on
       li   r0,>01e2
       bl   @vwtr
       .endproc
ball_init_data:
       data >4000,>8000,>0018,>800f,>10f8
*// init_level

*********************************************************************
*
* Main game loop
*
main_loop:
       .proc
main_loop_1:
       bl   @vsync
       bl   @update_vdp_regs
       bl   @upload_sprites
       bl   @move_ball
       bl   @move_other_sprites
       bl   @check_enemy_collision
       bl   @update_partial_name_table
       bl   @user_input
       bl   @display_score
       bl   @check_quit
       bl   @module_player
       bl   @scroll
       mov  @status,r0
       jlt  main_loop_2
       jgt  main_loop_3
       inc  @frame
       jmp  main_loop_1
main_loop_2:
       dec  @frame
       jne  main_loop_1
main_loop_3:
       .endproc
*// main_loop

*********************************************************************
*
* Wait for vertical retrace (CRU)
*
vsync:
       clr  r12
vsync_1:
       tb   2                          ; Test CRU bit for VDP interrupt
       jeq  vsync_1
       movb @vdpsta,@vdp_status
       rt
*// vsync

***************************************************************
*
* Update VDP registers
*
update_vdp_regs:
       .proc
*      Set pattern table
       mov  @scroll_x_pixels,r0
       andi r0,>0007
       ori  r0,>0400
       bl   @vwtr
*      Set name table
       mov  @scroll_x_pixels,r0
       andi r0,>0008
       srl  r0,2
       inc  r0
       ori  r0,>0200
       bl   @vwtr
       .endproc
*// update_vdp_regs

***************************************************************
*
* Upload sprites to VDP
*
upload_sprites:
       .proc
       li   r0,spratb
       bl   @vwad
*      Ball
       mov  @ball_y,r0
       ai   r0,->0100
       mov  @ball_x,r1
       mov  @ball_pattern_color,r2
       bl   @upload_sprite
       a    @ball_pattern_color_offset,r2
       bl   @upload_sprite
*      Points
       mov  @points_sprite_y,r0
       jeq  upload_sprites_1
       ai   r0,->0100
       mov  @points_sprite_x,r1
       mov  @points_sprite_pattern_color,r2
       bl   @upload_sprite
upload_sprites_1:
*      Enemy
       mov  @enemy_y,r0
       jeq  upload_sprites_2
       ai   r0,->0100
       mov  @enemy_x,r1
       li   r2,>800f
       bl   @upload_sprite
       ai   r2,>10fe
       bl   @upload_sprite
*      End marker
upload_sprites_2:
       li   r1,>d000
       movb r1,*r15
       .endproc
upload_sprite:
       movb r0,*r15                    ; y
       movb r1,*r15                    ; x
       movb r2,*r15                    ; Pattern
       movb @r2lb,*r15                 ; Color
       rt
*// upload_sprites

***************************************************************
*
* Move ball
*
move_ball:
       .proc
       abs  @demo
       jeq  move_ball_16
       b    @move_ball_14
**
*      X
*      Check x velocity
move_ball_16:
       mov  @ball_vx,r0
       jlt  move_ball_1
       mov  @ball_x,r0
       ci   r0,>e800
       jl   move_ball_0
       mov  @scroll_vx,@ball_vx        ;  Stop if edge is reached
*      Check char to the right of ball
move_ball_0:
       li   r0,>1000
       li   r1,>0800
       bl   @get_map_char_ball
       jeq  move_ball_2
       bl   @check_coinc_right
       jmp  move_ball_2
*      Check char to the left of ball
move_ball_1:
       li   r0,->0100
       li   r1,>0000
       bl   @get_map_char_ball
       jeq  move_ball_2
       bl   @check_coinc_left
*      Move x
move_ball_2:
       mov  @ball_vx,r0
       s    @scroll_vx,r0              ; Movement from scrolling
       mov  @ball_x,r1
       a    r0,r1
       ci   r1,->0400                  ; Check for out of screen left
       jl   move_ball_3
       clr  r1
move_ball_3:
       mov  r1,@ball_x
*      Animate
       li   r1,>10f8                   ; Default pattern color offset
       mov  @ball_vx,r0
       jeq  move_ball_15               ; Only if moving x
       mov  @ball_vy,r0
       jne  move_ball_15               ; Not if moving y
       mov  @ball_animation_ptr,r0
       jne  move_ball_15               ; Not if animated
       mov  @ball_rebounce,r0
       jne  move_ball_15               ; Not if rebouncing
       mov  @scroll_x_pixels,r0
       andi r0,4                       ; Alternate every 4th frame
       jeq  move_ball_15
       li   r1,>48f8
move_ball_15:
       mov  r1,@ball_pattern_color_offset
**
*      Y
*      Check for rebounce
       mov  @ball_rebounce,r0
       jne  move_ball_12
*      Accelerate
       a    @ball_ay,@ball_vy
*      Check y velocity
       mov  @ball_vy,r0
       jeq  move_ball_4
       jlt  move_ball_6
*      Moving down
*      Check char below ball
move_ball_4:
       li   r0,>0800
       li   r1,>1000
       bl   @get_map_char_ball
       jeq  move_ball_7
       bl   @check_coinc_bottom
       jmp  move_ball_7
*      Moving up
move_ball_6:
       ci   r0,->0080
       jlt  move_ball_13
       li   r0,>8000
       movb r0,@ball_pattern_color
*      Check char above ball
move_ball_13:
       li   r0,>0a00
       li   r1,->0100
       bl   @get_map_char_ball
       jeq  move_ball_7
       bl   @check_coinc_top
*      Move y
move_ball_7:
       a    @ball_vy,@ball_y
       jmp  move_ball_5
*      Rebounce
move_ball_12
       mov  r0,@ball_vy
       clr  @ball_rebounce
*      Animate
move_ball_5:
       mov  @ball_animation_ptr,r0
       jeq  move_ball_10
move_ball_8:
       mov  @ball_animation_count,r1
       jne  move_ball_11
       movb *r0+,@ball_pattern_color
       movb *r0+,@ball_animation_count+1
       jeq  move_ball_9
       mov  r0,@ball_animation_ptr
       jmp  move_ball_11
move_ball_9:
       clr  @ball_animation_ptr
       jmp  move_ball_10
move_ball_11:
       dec  @ball_animation_count
       jmp  move_ball_10
*      Demo
move_ball_14:
       a    @ball_vx,@ball_x
       s    @scroll_vx,@ball_x
       a    @ball_ay,@ball_vy
       a    @ball_vy,@ball_y
       mov  @ball_y,r0
       li   r1,16*8*256
       c    r0,r1
       jle  move_ball_10
       mov  r1,@ball_y
       neg  @ball_vy
       li   r0,>0040
       a    r0,@ball_vy
       bl   @play_jump
move_ball_10:
       .endproc
*// move_ball

***************************************************************
*
* Move other sprites than the ball
*
move_other_sprites:
       .proc
*      Points sprite
       mov  @points_sprite_y,r0
       jeq  move_other_sprites_2
       ci   r0,>1000
       jl   move_other_sprites_1
       ai   r0,->0100
       mov  r0,@points_sprite_y
       mov  @points_sprite_x,r0
       ci   r0,>0200
       jl   move_other_sprites_1
       s    @scroll_vx,r0
       mov  r0,@points_sprite_x
       jmp  move_other_sprites_2
move_other_sprites_1:
       clr  @points_sprite_y
move_other_sprites_2:
*      Enemy
       mov  @enemy_y,r0
       jeq  move_other_sprites_4
       a    @enemy_vx,@enemy_x
       a    @ball_ay,@enemy_vy
       mov  @enemy_x,r0
       ci   r0,>0100
       jh   move_other_sprites_6
       clr  @enemy_y
       jmp  move_other_sprites_5
move_other_sprites_6:
       mov  @enemy_vy,r0
       jlt  move_other_sprites_3
       mov  @enemy_x,r0
       ai   r0,>0800
       mov  @enemy_y,r1
       ai   r1,>1000
       bl   @get_map_char
       coc  @char_block_top,r1
       jne  move_other_sprites_3
       mov  @enemy_vy,r1
       ai   r1,->0050
       neg  r1
       mov  r1,@enemy_vy
move_other_sprites_3:
       a    @enemy_vy,@enemy_y
       jmp  move_other_sprites_5
move_other_sprites_4:
       mov  @enemy_list_ptr,r0
       c    @scroll_x_pixels,*r0+
       jne  move_other_sprites_5
       mov  r0,@enemy_list_ptr
       li   r0,>ff00
       mov  r0,@enemy_x
       li   r1,>3000
       mov  r1,@enemy_y
       li   r0,>fe80
       mov  r0,@enemy_vx
move_other_sprites_5:
       .endproc
*// move_other_sprites

***************************************************************
*
* Check for collision with enemy
*
check_enemy_collision:
       .proc
       mov  @vdp_status,r0
       andi r0,>2000
       jeq  check_enemy_collision_1
       mov  @enemy_y,r0
       jeq  check_enemy_collision_1
       s    @ball_y,r0
       abs  r0
       ci   r0,>1000
       jgt  check_enemy_collision_1
       mov  @enemy_x,r0
       s    @ball_x,r0
       abs  r0
       ci   r0,>1000
       jgt  check_enemy_collision_1
       bl   @die
check_enemy_collision_1:
       .endproc
*// check_enemy_collision

***************************************************************
*
* Update 1/8 name table
*
update_partial_name_table:
       .proc
       mov  @scroll_x_pixels,r6
*      Ceiling and floor
       mov  r6,r1
       andi r1,>000f
       sla  r1,1
       mov  @floor_ceil_table(r1),r0
       bl   @vwad
       mov  r6,r1
       andi r1,>0006
       ai   r1,ceiling
       mov  *r1,r2
       mov  r6,r1
       andi r1,>0008
       jne  update_partial_name_table_0
       swpb r2
update_partial_name_table_0:
       movb r2,r0
       swpb r2
       movb r2,r1
       li   r2,4
update_partial_name_table_1:
       movb r0,*r15
       movb r1,*r15
       movb r0,*r15
       movb r1,*r15
       dec  r2
       jne  update_partial_name_table_1
*      Middle rows
       andi r6,>0007
       sla  r6,1
       li   r7,2
       bl   @copy_map_rows_from_vdp
       .endproc
*// update_partial_name_table

***************************************************************
*
* Read user input
*
user_input:
       .proc
       mov  @status,r0
       jlt  user_input_5
       mov  @ball_vy,r0
       jne  user_input_4
       li   r0,JOY_FI
       bl   @check_key
       jeq  user_input_1
       bl   @jump
user_input_1:
       mov  @scroll_vx,r1              ; Default speed
       tb   1                          ; Left
       jeq  user_input_2
       s    @scroll_vx,r1
       ai   r1,->0040
       jmp  user_input_3
user_input_2:
       tb   2                          ; Right
       jeq  user_input_3
       ai   r1,>0080
user_input_3:
       mov  r1,@ball_vx
       mov  r1,@ball_vx_last
       jmp  user_input_5
user_input_4:
       mov  @ball_vx_last,@ball_vx
user_input_5:
       .endproc
*// user_input

***************************************************************
*
* Display score
*
display_score:
       .proc
       c    @score,@disp_score
       jeq  display_score_1
       li   r0,32*23+8
       mov  @score,r1
       li   r2,5
       bl   @display_decimal
       mov  @score,@disp_score
display_score_1:
       .endproc
*// display_score

***************************************************************
*
* Display level
*
display_level:
       .proc
       li   r0,32*23+20
       mov  @level,r1
       li   r2,2
       bl   @display_decimal
       .endproc
*// display_level

***************************************************************
*
* Display lives
*
display_lives:
       .proc
       li   r0,32*23+29
       mov  @lives,r1
       li   r2,2
       bl   @display_decimal
       .endproc
*// display_lives

*********************************************************************
*
* Check quit
*
check_quit:
       clr  r1                         ; Test column 0
       li   r12,>0024                  ; Address for column selection
       ldcr r1,3                       ; Select column
       li   r12,>0006                  ; Address to read rows
       stcr r1,8
       andi r1,>1100
       jeq  quit
*      Return
       rt
*      Quit
quit   clr  @>83c4                     ; Reset user ISR address
       blwp @>0000
*// check_quit

***************************************************************
*
* Update scrolling variables
*
scroll:
       mov  @scroll_x,r0
       mov  @scroll_vx,r1
       sra  r1,4
       a    r1,r0
       mov  r0,@scroll_x
       srl  r0,4
       mov  r0,@scroll_x_pixels
       ci   r0,map_width*8
       jlt  scroll_1
       inc  @status
scroll_1:
       rt
*// scroll

***************************************************************
*
* Copy map rows from VDP RAM
*
* r6: Start row number to copy
* r7: Number of rows to copy
*
copy_map_rows_from_vdp:
       .proc
*      Dest
       mov  @scroll_x_pixels,r1        ; Calculate current name table address
       inv  r1
       andi r1,>0008
       sla  r1,8
       ai   r1,nametb
       mov  r6,r0                      ; Row offset
       inct r0                         ; Two rows offset
       sla  r0,5
       a    r0,r1
*      Source
       mov  @scroll_x_pixels,r5        ; Column offset
       srl  r5,3
       inc  r5                         ; Plus one
       andi r5,map_width-1             ; Wrap at 256 columns
       sla  r6,1                       ; Lookup table address
       ai   r6,map_row_table
copy_map_rows_from_vdp_1:
       mov  *r6+,r0                    ; Row start
       a    r5,r0                      ; Add column offset
       ci   r5,map_width-screen_width
       jh   copy_map_rows_from_vdp_2
*      Fast, non-wrapping
       li   r2,screen_width
       bl   @vdp_to_vdp_copy_fast      ; Copy row
       jmp  copy_map_rows_from_vdp_3
*      Slow, wrapping
copy_map_rows_from_vdp_2:
       li   r2,map_width
       s    r5,r2
       bl   @vdp_to_vdp_copy           ; Copy 1st part
       mov  r5,r2
       ai   r2,-(map_width-screen_width)
       dect r6
       mov  *r6+,r0
       bl   @vdp_to_vdp_copy           ; Copy 2nd part from beginning
copy_map_rows_from_vdp_3:
       dec  r7
       jne  copy_map_rows_from_vdp_1
       .endproc
*// copy_map_rows_from_vdp

***************************************************************
*
* Update full name table
*
update_full_name_table:
       .proc
*      Ceiling and floor
       li   r0,nametb
       li   r3,ceiling
       li   r4,2
update_full_name_table_0:
       bl   @vwad
       mov  *r3+,r1
       bl   @update_full_name_table_2
       mov  *r3+,r1
       bl   @update_full_name_table_2
       ai   r0,>0240
       dec  r4
       jne  update_full_name_table_0
*      Dest
       li   r1,nametb+>40
*      Source
       mov  @scroll_x_pixels,r5        ; Column offset
       srl  r5,3
       li   r6,map_row_table
*      Copy
       li   r7,map_height
update_full_name_table_1:
       mov  *r6+,r0                    ; Row start
       a    r5,r0                      ; Add column offset
       li   r2,screen_width
       bl   @vdp_to_vdp_copy_fast      ; Copy row
       dec  r7
       jne  update_full_name_table_1
       .endproc
update_full_name_table_2:
       li   r2,16
update_full_name_table_3:
       movb r1,*r15
       movb @r1lb,*r15
       dec  r2
       jne  update_full_name_table_3
       rt
*// update_full_name_table

***************************************************************
*
* Check collision to the right of ball
*
* r0: VDP address of collision char
* r1: Collision char properties
*
check_coinc_right:
       .proc
       coc  @char_deadly,r1
       jeq  check_coinc_right_1
       coc  @char_collectable,r1
       jeq  check_coinc_right_2
       coc  @char_slow_speed,r1
       jeq  check_coinc_right_4
       coc  @char_normal_speed,r1
       jeq  check_coinc_right_5
       coc  @char_block_left,r1
       jne  check_coinc_right_3
*      Collision with blocker
       clr  @ball_vx
       mov  @ball_x,r0
       andi r0,>ff00
       jne  check_coinc_right_3
*      Collision with deadly
check_coinc_right_1:
       bl   @die
       jmp  check_coinc_right_3
*      Collision with star
check_coinc_right_2:
       bl   @collect_star
       jmp  check_coinc_right_3
*      Collision with slow
check_coinc_right_4:
       bl   @slow_speed
       jmp  check_coinc_right_3
*      Collision with normal
check_coinc_right_5:
       bl   @normal_speed
check_coinc_right_3:
       .endproc
*// check_coinc_right

***************************************************************
*
* Check collision to the left of ball
*
* r0: VDP address of collision char
* r1: Collision char properties
*
check_coinc_left:
       .proc
       coc  @char_deadly,r1
       jeq  check_coinc_left_1
       coc  @char_collectable,r1
       jeq  check_coinc_left_2
       coc  @char_block_right,r1
       jne  check_coinc_left_3
*      Collision with blocker
       clr  @ball_vx
       jmp  check_coinc_left_3
*      Collision with deadly
check_coinc_left_1:
       bl   @die
       jmp  check_coinc_left_3
*      Collision with star
check_coinc_left_2:
       bl   @collect_star
check_coinc_left_3:
       .endproc
*// check_coinc_left

***************************************************************
*
* Check collision below the ball
*
* r0: VDP address of collision char
* r1: Collision char properties
*
check_coinc_bottom:
       .proc
       coc  @char_deadly,r1
       jeq  check_coinc_bottom_1
       coc  @char_collectable,r1
       jeq  check_coinc_bottom_2
       coc  @char_long_jump,r1
       jeq  check_coinc_bottom_7
       coc  @char_block_top,r1
       jne  check_coinc_bottom_3
*      Collision with blocker
       mov  @ball_vy,r0
       ci   r0,>0300
       jlt  check_coinc_bottom_4
       li   r0,->0100
       mov  r0,@ball_rebounce          ; Rebounce
       jmp  check_coinc_bottom_5
check_coinc_bottom_4:
       ci   r0,>0020
       jlt  check_coinc_bottom_6
check_coinc_bottom_5:
       mov  @ball_y,r0                 ; Align to meta tile
       andi r0,>f000
       mov  r0,@ball_y
       li   r0,>800f
       mov  r0,@ball_pattern_color
       mov  @ball_animation_ptr,r0
       jne  check_coinc_bottom_6
       li   r0,animation_land          ; Animate
       mov  r0,@ball_animation_ptr
check_coinc_bottom_6:
       clr  @ball_vy                   ; Stop movement
       jmp  check_coinc_bottom_3
*      Collision with deadly
check_coinc_bottom_1:
       bl   @die
       jmp  check_coinc_left_3
*      Collision with star
check_coinc_bottom_2:
       bl   @collect_star
       jmp  check_coinc_left_3
*      Collision with spring
check_coinc_bottom_7:
       bl   @long_jump
check_coinc_bottom_3:
       .endproc
*// check_coinc_bottom

***************************************************************
*
* Check collision above the ball
*
* r0: VDP address of collision char
* r1: Collision char properties
*
check_coinc_top:
       .proc
       coc  @char_deadly,r1
       jeq  check_coinc_top_1
       coc  @char_collectable,r1
       jeq  check_coinc_top_2
       coc  @char_block_bottom,r1
       jne  check_coinc_top_3
*      Collision with blocker
       clr  @ball_vy
       jmp  check_coinc_left_3
*      Collision with deadly
check_coinc_top_1:
       bl   @die
       jmp  check_coinc_left_3
*      Collision with star
check_coinc_top_2:
       bl   @collect_star
check_coinc_top_3:
       .endproc
*// check_coinc_top

***************************************************************
*
* Die
*
die:
       .proc
       mov  @status,r0
       jlt  die_1
       seto @status
       li   r2,animation_die           ; Animate
       mov  r2,@ball_animation_ptr
       li   r0,120
       mov  r0,@frame
       clr  @scroll_vx
       clr  @ball_vx
       clr  @ball_vy
       bl   @play_die
       li   r0,no
       bl   @speak
die_1:
       .endproc
*// die

***************************************************************
*
* Init jump
*
jump:
       .proc
       li   r0,->02c0
       mov  r0,@ball_vy
       li   r0,>8c0f
       mov  r0,@ball_pattern_color
       clr  @ball_rebounce
       bl   @play_jump
       .endproc
*// jump

***************************************************************
*
* Init long jump
*
long_jump:
       .proc
       li   r1,spring_collapsed
       bl   @replace_meta_tile
       li   r0,->0400
       mov  r0,@ball_vy
       li   r0,>8c0e
       mov  r0,@ball_pattern_color
       clr  @ball_rebounce
       bl   @play_long_jump
       li   r0,long
       bl   @speak
       .endproc
*// long_jump

***************************************************************
*
* Collect a star
*
* r0: VDP address of a character in the star metatile
*
collect_star:
       .proc
       bl   @remove_meta_tile
       mov  @ball_y,r0
       ai   r0,->1000
       mov  r0,@points_sprite_y
       mov  @ball_x,r0
       ai   r0,>1000
       mov  r0,@points_sprite_x
       mov  @scroll_vx,r0
       ci   r0,scroll_speed_normal
       jne  collect_star_1
       li   r0,sprite_100_pt
       li   r1,100
       jmp  collect_star_2
collect_star_1:
       li   r0,sprite_50_pt
       li   r1,50
collect_star_2:
       mov  *r0,@points_sprite_pattern_color
       a    r1,@score
       bl   @play_star
;       li   r0,yes
;       bl   @speak
       .endproc
*// collect_star

***************************************************************
*
* Set scrolling to slow
*
slow_speed:
       .proc
       mov  @scroll_vx,r0
       ci   r0,scroll_speed_slow
       jeq  slow_speed_1
       li   r0,scroll_speed_slow
       mov  r0,@scroll_vx
       bl   @play_slow
       li   r0,uhoh
       bl   @speak
slow_speed_1:
       .endproc
*// slow_speed

***************************************************************
*
* Set scrolling to normal
*
normal_speed:
       .proc
       mov  @scroll_vx,r0
       ci   r0,scroll_speed_normal
       jeq  normal_speed_1
       li   r0,scroll_speed_normal
       mov  r0,@scroll_vx
       bl   @play_normal
       li   r0,double
       bl   @speak
normal_speed_1:
       .endproc
*// normal_speed

***************************************************************
*
* Get map char relative to ball
*
* r0: x offset in MSB
* r1: y offset in MSB
*
* Call get_map_char to specify the absolute position
* in r0 and r1 instead.
*
* On return:
* r0 contains the VDP address of the character
* r1 contains the properties of the character
*
get_map_char_ball:
       a    @ball_y,r1                 ; Add y to offset
       a    @ball_x,r0                 ; Add x to offset
get_map_char:
       srl  r1,11                      ; To chars
       ci   r1,2                       ; Above map?
       jhe  get_map_char_1
       clr  r0                         ; No VDP address
       clr  r1                         ; Space properites
       rt
get_map_char_1:
       dect r1                         ; Adjust for ceiling
       ci   r1,map_height              ; Below map?
       jl   get_map_char_2
       clr  r0                         ; No VDP address
       li   r1,:0000000000001111       ; Floor properties
       rt
get_map_char_2:
       srl  r0,8                       ; To pixels
       a    @scroll_x_pixels,r0        ; Add scroll offset
       srl  r0,3                       ; To chars
       andi r0,>00ff                   ; Wrap around
       sla  r1,1                       ; To word
       a    @map_row_table(r1),r0      ; Add row offset
       movb @r0lb,@vdpwa               ; Send low byte of VDP RAM read address
       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
       nop
       movb *r14,r1                    ; Read byte from VDP RAM
       srl  r1,8                       ; To LSB
       sla  r1,1                       ; To word
       mov  @TCHARS(r1),r1             ; Get from/to chars
       srl  r1,8                       ; To LSB
       sla  r1,1                       ; To word
       mov  @char_props_table(r1),r1   ; Get properties
       rt
*// get_map_char

***************************************************************
*
* Remove meta tile from map
*
* r0: VDP address of a character in the metatile to remove
*
remove_meta_tile:
       .proc
       andi r0,>3efe                   ; Adjust to metatile
       dec  r0
       bl   @vwad
       clr  *r15
       clr  *r15
       clr  *r15
       ai   r0,>100
       bl   @vwad
       clr  *r15
       clr  *r15
       clr  *r15
       .endproc
*// remove_meta_tile

***************************************************************
*
* Replace meta tile in map
*
* r0: VDP address of a character in the metatile to replace
* r1: CPU RAM address of replacement characters
*
replace_meta_tile:
       .proc
       andi r0,>3efe                   ; Adjust to metatile
       dec  r0
       bl   @vwad
       movb *r1+,*r15
       movb *r1+,*r15
       movb *r1+,*r15
       ai   r0,>100
       bl   @vwad
       movb *r1+,*r15
       movb *r1+,*r15
       movb *r1+,*r15
       .endproc
*// replace_meta_tile

***************************************************************
*
* Scroll patterns horizontally and upload to VDP
*
scroll_patterns:
       .proc
       li   r4,TCHARS                  ; Pointer to from/to pattern numbers
*      Pattern loop
       clr  r2                         ; Pattern counter
scroll_patterns_1:
*      Scroll offset loop
       clr  r3                         ; Horizontal scroll offset (0-7)
scroll_patterns_2:
       mov  *r4,r5                     ; Get from and to pattern numbers
       jlt  scroll_patterns_5          ; >ff = unused
       mov  r5,r6                      ; Copy
       andi r5,>ff00                   ; Isolate
       swpb r5                         ; To LSB
       mov  r5,r8                      ; Copy
       sla  r5,3                       ; Multiply by 8
       ai   r5,pat0                    ; Address of from pattern
       sla  r8,1                       ; To word offset
       mov  @char_props_table(r8),r9   ; Check for vertical scrolling
       coc  @char_vert_scroll,r9
       jne  !
       mov  r5,r0
       li   r1,buffer
       bl   @copy_char_to_buffer
       li   r5,buffer
       a    r3,r5                      ; Add scroll offset
!      andi r6,>00ff                   ; Isolate
       mov  r6,r8                      ; Copy
       sla  r6,3                       ; Multiply by 8
       ai   r6,pat0                    ; Address of to pattern
       sla  r8,1                       ; To word offset
       mov  @char_props_table(r8),r9   ; Check for vertical scrolling
       coc  @char_vert_scroll,r9
       jne  !
       mov  r6,r0
       li   r1,buffer+16
       bl   @copy_char_to_buffer
       li   r6,buffer+16
       a    r3,r6                      ; Add scroll offset
*      Write address
!      mov  r2,r0                      ; Pattern number
       sla  r0,3                       ; Multiply by 8
       mov  r3,r1                      ; Scroll offset
       sla  r1,11                      ; Multiply by >800
       a    r1,r0                      ; Add to pattern offset
       bl   @vwad                      ; Setup write address
*      Row loop
       li   r7,8                       ; Row counter
scroll_patterns_3:
       movb *r5+,r1                    ; Get from byte
       movb *r6+,@r1lb                 ; Get to byte
       mov  r3,r0                      ; Get scroll offset
       jeq  scroll_patterns_4          ; Skip shift if zero
       sla  r1,0
scroll_patterns_4:
       movb r1,*r15                    ; Send to VDP
*      Next row
       dec  r7
       jne  scroll_patterns_3
*      Next scroll offset
       inc  r3
       ci   r3,8
       jlt  scroll_patterns_2
*      Next pattern
scroll_patterns_5:
       inct r4
       inc  r2
       c    r2,@TCHNUM                      ;
       jlt  scroll_patterns_1
       .endproc
*// scroll_patterns

*********************************************************************
*
* Copy char pattern to buffer twice
*
* r0: source
* r1: dest
*
copy_char_to_buffer:
       li   r9,8
copy_char_to_buffer_1:
       movb *r0,@8(r1)
       movb *r0+,*r1+
       dec  r9
       jne  copy_char_to_buffer_1
       rt
*// copy_char_to_buffer

*********************************************************************
*
* Read character set from GROM
*
read_grom_chars:
       .proc
       li   r0,ptrntb+>300
       li   r3,8
read_grom_chars_1:
       bl   @vwad
       li   r4,charset
       li   r5,32
read_grom_chars_2:
       clr  r1
       movb *r4+,@r1lb
       ai   r1,-32
       mov  r1,r6
       sla  r1,3
       s    r6,r1
       ai   r1,1716
       movb r1,@grmwa
       movb @r1lb,@grmwa
       clr  *r15                       ; Top line
       li   r2,4
read_grom_chars_3:
       movb @grmrd,r1
       srl  r1,1
       movb r1,*r15
       dec  r2
       jne  read_grom_chars_3
       li   r2,3
read_grom_chars_4:
       movb @grmrd,*r15
       dec  r2
       jne  read_grom_chars_4
       dec  r5
       jne  read_grom_chars_2
       ai   r0,>800
       dec  r3
       jne  read_grom_chars_1
       .endproc
*// read_grom_chars

*********************************************************************************
*
* Display text to both name table buffers (slow)
*
* r0: Screen offset
* r1: Points to zero terminated ascii text
*
* Modifies r0-r6
*
display_text:
       .proc
       ai   r0,nametb
       bl   @vwad
       li   r2,buffer
display_text_0:
       movb *r1+,r4
       jeq  display_text_4
       li   r5,charset
       clr  r6
display_text_1:
       cb   r4,*r5+
       jeq  display_text_2
       inc  r6
       ci   r6,32
       jlt  display_text_1
       li   r6,chr_qst_mark
       jmp  display_text_3
display_text_2:
       ai   r6,96
display_text_3:
       swpb r6
       movb r6,*r15
       movb r6,*r2+
       jmp  display_text_0
*      2nd name table buffer
display_text_4:
       ai   r0,namet2-nametb
       li   r1,buffer
       ai   r2,-buffer
       bl   @vmbw
       .endproc
*// display_text

*********************************************************************
*
* Display decimal number
* VDP address must already be set up.
*
* r0: Screen offset
* r1: Number to display
* r2: Number of digits
*
display_decimal:
       .proc
       ai   r0,nametb
       mov  r0,r4
       bl   @vwad
       li   r5,buffer
       li   r3,5
       s    r2,r3
       sla  r3,1
       ai   r3,d10000
       dec  r2
display_decimal_1:
       clr  r0
       div  *r3+,r0
       ai   r0,chr_zero
       swpb r0
       movb r0,*r15
       movb r0,*r5+
       dec  r2
       jne  display_decimal_1
       ai   r1,chr_zero
       swpb r1
       movb r1,*r15
       movb r1,*r5+
*      2nd name table buffer
       mov  r4,r0
       ai   r0,namet2-nametb
       li   r1,buffer
       mov  r5,r2
       ai   r2,-buffer
       bl   @vmbw
       .endproc
d10000:
       data 10000
d1000:
       data 1000
d100:
       data 100
d10:
       data 10
*// display_decimal

*********************************************************************
*
* Set graphics mode
*
graphics_mode:
       .proc
       clr  r0
       li   r1,vregs2
       li   r2,8
graphics_mode_1:
       movb *r1+,@r0lb
       bl   @vwtr                      ; Set register
       ai   r0,>0100
       dec  r2
       jne  graphics_mode_1
*      Clear VDP RAM
       clr  r0
       clr  r1
       li   r2,>4000
       bl   @vsmw
*      Colors
       li   r0,colrtb
       li   r1,>f100
       li   r2,32
       bl   @vsmw
       li   r0,colrtb
       li   r1,CLRSET
       mov  @CLRNUM,r2
       bl   @vmbw
*      Return
       .endproc
*      VDP registers
vregs2:
       byte >00                        ; Graphics I mode
       byte >e2                        ; 16K, display on, interrupt enabled
       byte nametb/>400                ; Name table
       byte colrtb/>40                 ; Color table
       byte ptrntb/>800                ; Pattern table
       byte spratb/>80                 ; Sprite attribute table
       byte sprptb/>800                ; Sprite pattern table
       byte >01                        ; Backdrop color
*// graphics_mode

*********************************************************************
*
* VDP to VDP copy (slower)
*
* r0: Source address
* r1: Destination address
* r2: Number of bytes to copy
*
* Modifies r0-r4. On return r0 and r1 are incremented by r2 bytes.
*
vdp_to_vdp_copy:
       .push r5
       ori  r1,>4000                   ; Prepare write address
vdp_to_vdp_copy_1:
       li   r5,buffer_size
       c    r2,r5
       jhe  vdp_to_vdp_copy_2
       mov  r2,r5
vdp_to_vdp_copy_2:
*      Read block
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM read address
       swpb r0
       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
       li   r4,buffer
       mov  r5,r3
vdp_to_vdp_copy_3:
       movb *r14,*r4+
       dec  r3
       jne  vdp_to_vdp_copy_3
*      Write block
       swpb r1
       movb r1,@vdpwa
       swpb r1
       movb r1,@vdpwa
       li   r4,buffer
       mov  r5,r3
vdp_to_vdp_copy_4:
       movb  *r4+,*r15
       dec  r3
       jne  vdp_to_vdp_copy_4
*      Next
       a    r5,r0
       a    r5,r1
       s    r5,r2
       jgt  vdp_to_vdp_copy_1
       .pop r5
       rt
*// vdp_to_vdp_copy

*********************************************************************
*
* VDP to VDP copy (fast)
*
* r0: Source address
* r1: Destination address
* r2: Number of bytes to copy (must be a multiple of buffer_size (32))
*
* Modifies r0-r4. On return r0 and r1 are incremented by r2 bytes.
*
vdp_to_vdp_copy_fast:
       ori  r1,>4000                   ; Prepare write address
       srl  r2,log_2_buffer_size
vdp_to_vdp_copy_fast_1:
*      Read block
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM read address
       swpb r0
       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
       li   r3,buffer_size/4
       li   r4,buffer
vdp_to_vdp_copy_fast_2:
       movb *r14,*r4+
       movb *r14,*r4+
       movb *r14,*r4+
       movb *r14,*r4+
       dec  r3
       jne  vdp_to_vdp_copy_fast_2
*      Write block
       swpb r1
       movb r1,@vdpwa
       swpb r1
       movb r1,@vdpwa
       li   r3,buffer_size/4
       li   r4,buffer
vdp_to_vdp_copy_fast_3:
       movb *r4+,*r15
       movb *r4+,*r15
       movb *r4+,*r15
       movb *r4+,*r15
       dec  r3
       jne  vdp_to_vdp_copy_fast_3
       ai   r0,buffer_size
       ai   r1,buffer_size
       dec  r2
       jne  vdp_to_vdp_copy_fast_1
       rt
*// vdp_to_vdp_copy_fast

*********************************************************************
*
* VDP Write To Register
*
* R0 MSB: VDP register to write to
* R0 LSB: Value to write
*
vwtr:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte (value) to write to VDP register
       swpb r0
       ori  r0,>8000                   ; Set up a VDP register write operation (10)
       movb r0,@vdpwa                  ; Send high byte (address) of VDP register
       rt
*// vwtr

*********************************************************************
*
* VDP Set Write Address
*
* R0: Write address in VDP RAM
*
* R0 is modified, but can be restored with: ANDI R0,>3FFF
*
vwad:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       rt
*// vwad

*********************************************************************
*
* VDP Set Read Address
*
* R0: Read address in VDP RAM
*
vrad:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM read address
       swpb r0
       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
       rt
*// vrad

*********************************************************************
*
* VDP Single Byte Read
*
* R0:  Read address in VDP RAM
* R1:  MSB of R1 set to byte from VDP RAM
*
vsbr:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM read address
       swpb r0
       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
       nop
       movb *r14,r1                    ; Read byte from VDP RAM
       rt
*// vsbr

*********************************************************************
*
* VDP Single Byte Write
*
* R0: Write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
*
* R0 is modified, but can be restored with: ANDI R0,>3FFF
*
vsbw:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       movb r1,*r15                    ; Write byte to VDP RAM
       rt
*// vsbw

*********************************************************************
*
* VDP multiple Byte Write
*
* R0: Write address in VDP RAM
* R1: Starting read address in CPU RAM
* R2: Number of bytes to send
*
* R0 is modified, but can be restored with: ANDI R0,>3FFF
*
vmbw:
       movb  @r0lb,@vdpwa              ; Send low byte of VDP RAM write address
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
vmbw_1:
       movb *r1+,*r15                  ; Write byte to VDP RAM
       dec  r2
       jne  vmbw_1
       rt
*// vmbw

*********************************************************************
*
* VDP Single Byte Multiple Write
*
* R0: Write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
* R2: Number of bytes to write to VDP RAM
*
* R0 is modified, but can be restored with: ANDI R0,>3FFF
*
vsmw:
       movb  @r0lb,@vdpwa              ; Send low byte of VDP RAM write address
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
vsmw_1:
       movb r1,*r15                    ; Write byte to VDP RAM
       dec  r2                         ; Byte counter
       jne  vsmw_1
       rt
*// vsmw

*********************************************************************
*
* VDP Multiple Byte Read
*
* R0: Starting read address in VDP RAM
* R1: Starting write address in CPU RAM
* R2: Number of bytes to read from VDP RAM
*
* Modifies R0-R2
*
vmbr:
       movb  @r0lb,@vdpwa              ; Send low byte of VDP RAM read address
       andi r0,>3fff                   ; Set read/write bits 14 and 15 to read (00)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
vmbr_1:
       movb *r14,*r1+                  ; Read byte from VDP RAM
       dec  r2                         ; Byte counter
       jne  vmbr_1                     ; Check if finished
       rt
*// vmbr

*********************************************************************
*
* Wait until fire or timeout
*
* @frame: Number of frames to wait
*
* Modifies r0-r6
*
wait:
       .proc
wait_1:
       bl   @vsync
       bl   @module_player
       bl   @check_quit
       li   r0,JOY_FI
       bl   @check_key
       jne  wait_2
       dec  @frame
       jne  wait_1
wait_2:
       .endproc
*// wait

*********************************************************************
*
* Check key
*
* r0: Column in MSB: >0000 - >0700, Row in LSB: >0006 - >0014
*
*       Column   0      1    2    3    4    5     6       7
*     Row
*     >0006      =      .    ,    M    N    /    Fire    Fire
*     >0008    Space    L    K    J    H    ;    Left    Left
*     >000A    Enter    O    I    U    Y    P    Right   Right
*     >000C             9    8    7    6    0    Down    Down
*     >000E    Fctn     2    3    4    5    1    Up      Up
*     >0010    Shift    S    D    F    G    A
*     >0012    Ctrl     W    E    R    T    Q
*     >0014             X    C    V    B    Z
*
* On return NEQ means that the key is pressed
*
KEY_FI EQU  >0606
KEY_LF EQU  >0608
KEY_RG EQU  >060A
KEY_DN EQU  >060C
KEY_UP EQU  >060E
KEY_CM EQU  >0206
KEY_FS EQU  >0106
KEY_0  EQU  >050C
KEY_1  EQU  >050E
KEY_2  EQU  >010E
KEY_3  EQU  >020E
KEY_4  EQU  >030E
KEY_5  EQU  >040E
KEY_6  EQU  >040C
KEY_7  EQU  >030C
KEY_8  EQU  >020C
KEY_9  EQU  >010C
KEY_A  EQU  >0510
KEY_B  EQU  >0414
KEY_C  EQU  >0214
KEY_D  EQU  >0210
KEY_E  EQU  >0212
KEY_F  EQU  >0310
KEY_G  EQU  >0410
KEY_H  EQU  >0408
KEY_I  EQU  >020A
KEY_J  EQU  >0308
KEY_K  EQU  >0208
KEY_L  EQU  >0108
KEY_M  EQU  >0306
KEY_N  EQU  >0406
KEY_O  EQU  >010A
KEY_P  EQU  >050A
KEY_Q  EQU  >0512
KEY_R  EQU  >0312
KEY_S  EQU  >0110
KEY_T  EQU  >0412
KEY_U  EQU  >030A
KEY_V  EQU  >0314
KEY_W  EQU  >0112
KEY_X  EQU  >0114
KEY_Y  EQU  >040A
KEY_Z  EQU  >0514
KEY_SP EQU  >0008
KEY_EN EQU  >000A
KEY_FN EQU  >000E
KEY_SH EQU  >0010
KEY_CT EQU  >0012
JOY_FI EQU  >0606
JOY_LT EQU  >0608
JOY_RT EQU  >060A
JOY_DN EQU  >060C
JOY_UP EQU  >060E
*
check_key:
       li   r12,>0024                  ; CRU address of the column decoder
       ldcr r0,3                       ; Select column
       andi r0,>00ff
       mov  r0,r12                     ; Select row
       tb   0                          ; Test key, EQ if not pressed
       rt
*// check_key

*********************************************************************
*
* CPU space to CPU space copy
*
* r0: source
* r1: destination
* r2: number of bytes
*
copy:
       mov  *r0+,*r1+
       dect r2
       jne  copy
       rt
*// copy

*********************************************************************
*
* CPU space clear
*
* r0: start
* r2: number of bytes
*
clear:
       clr  *r0+
       dect r2
       jne  clear
       rt
*// clear

*********************************************************************
*
* Trampoline code for executing bank 0 routine
* Copied into scratchpad at bank_0_exec
*
* r13: address of bank 0 routine
*
bank_0_exec_code:
       .proc
       seto @bank_0
       bl   *r13
       seto @bank_1
       .endproc
bank_0_exec_code_end
*// bank_0_exec_code

*********************************************************************
*
* Trampoline code for executing bank 1 routine
* Copied into scratchpad at bank_1_exec
*
* r13: address of bank 1 routine
*
bank_1_exec_code:
       .proc
       seto @bank_1
       bl   *r13
       seto @bank_0
       .endproc
bank_1_exec_code_end
*// bank_1_exec_code

*********************************************************************
*
* Speak a word from the resident vocabulary
*
* r0: points to the word to say.
*
long   equ  >40d3                      ; Long jump
point  equ  >50ec                      ; Bonus points
uhoh   equ  >71f4                      ; Confusion
good   equ  >30d6                      ;
finish equ  >2b94                      ; Level completed
more   equ  >4642                      ; Extra life
top    equ  >6f8d                      ; Energy
yes    equ  >7d58                      ;
no     equ  >3c4f                      ; Space
connec equ  >208b                      ; Switch
fine   equ  >2b1e                      ; Immunity
double equ  >2599                      ; Speed
ready  equ  >56b3
ah     equ  >1700
oh     equ  >4b7d
*
speak:
       li   r2,4
speak_1:
       src  r0,4
       mov  r0,r1
       src  r1,4
       andi r1,>0f00
       ori  r1,>4000
       movb r1,@spchwt
       dec  r2
       jne  speak_1
       li   r0,>4000
       movb r0,@spchwt
       li   r0,>5000
       movb r0,@spchwt
       rt
*// speak

*********************************************************************
*
* Data
*
map_row_table:
       data vmap0,vmap0+>100,vmap0+>200,vmap0+>300
       data vmap1,vmap1+>100,vmap1+>200,vmap1+>300
       data vmap2,vmap2+>100,vmap2+>200,vmap2+>300
       data vmap3,vmap3+>100,vmap3+>200,vmap3+>300
floor_ceil_table:
       data namet2+>0000,namet2+>0010,namet2+>0020,namet2+>0030
       data namet2+>0240,namet2+>0250,namet2+>0260,namet2+>0270
       data nametb+>0000,nametb+>0010,nametb+>0020,nametb+>0030
       data nametb+>0240,nametb+>0250,nametb+>0260,nametb+>0270
animation_land:
       byte >88,6
       byte >84,6
       byte >80,0
animation_die:
       byte >80,6
       byte >84,6
       byte >88,6
       byte >a0,6
       byte >a4,6
       byte >a8,6
       byte >ac,6
       byte >bc,6
       byte >d0,0
sprite_100_pt:
       byte >c0,>0f
sprite_50_pt:
       byte >c4,>0e
enemy_lists:
       data enemy_list_0
       data enemy_list_1
       data enemy_list_2
       data enemy_list_3
       data enemy_list_4
enemy_list_0:
       data -1
enemy_list_1:
       data >600,-1
enemy_list_2:
       data >300,-1
enemy_list_3:
       data >300,>600,-1
enemy_list_4:
       data >200,>400,>600,-1
txt_stats:
       text "SCORE:000000 LEVEL:00 LIVES:00"
       byte 0
txt_title:
       text "  OBSTACLE COURSE  "
       byte 0
txt_copyright:
       text "  COPYRIGHT 2019   "
       byte 0
txt_credits:
       text " RASMUS MOUSTGAARD "
       byte 0
txt_fire_to_begin:
       text "PRESS FIRE TO BEGIN"
       byte 0
txt_game_over:
       text "     GAME OVER     "
       byte 0
       even

*********************************************************************
*
* Includes
*
       copy "sound-defs.a99"
       copy "sound-player.a99"
       copy "music-player.a99"
       copy "sound-fx.a99"
       copy "obstacles-music.a99"
       copy "charset.a99"
map_chars:
       copy "map-chars.a99"

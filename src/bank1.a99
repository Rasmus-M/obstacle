***************************************************************
*
* Cartridge bank 1
*
       bank 1

***************************************************************
*
* Unpack and copy map to VDP RAM
*
copy_map_to_vdp:
       .proc
       mov  @mod_level,r3
       sla  r3,2
*      Upload
       li   r0,>2000
       mov  @maps(r3),r1
       mov  @maps+2(r3),r2
       bl   @vmbw
*      Unpack
       li   r0,>2000                   ; Source
       li   r1,>1000                   ; Destination
       li   r2,>2000                   ; Source end
       a    @maps+2(r3),r2
       bl   @unpack_lz4_from_to_vdp
*      Rearrange
       li   r0,>1000
       li   r1,vmap0
       li   r2,>400
       bl   @vdp_to_vdp_copy_fast
       li   r0,>1400
       li   r1,vmap1
       li   r2,>400
       bl   @vdp_to_vdp_copy_fast
       li   r0,>1800
       li   r1,vmap2
       li   r2,>400
       bl   @vdp_to_vdp_copy_fast
       li   r0,>1c00
       li   r1,vmap3
       li   r2,>400
       bl   @vdp_to_vdp_copy_fast
       .endproc
*// copy_map_to_vdp

*********************************************************************
*
* VDP to VDP copy (fast)
*
* r0: Source address
* r1: Destination address
* r2: Number of bytes to copy (must be a multiple of buffer_size (32))
*
* Modifies r0-r4. On return r0 and r1 are incremented by r2 bytes.
*
vdp_to_vdp_copy_fast:
       ori  r1,>4000                   ; Prepare write address
       srl  r2,log_2_buffer_size
vdp_to_vdp_copy_fast_1:
*      Read block
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM read address
       swpb r0
       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
       li   r3,buffer_size/4
       li   r4,buffer
vdp_to_vdp_copy_fast_2:
       movb *r14,*r4+
       movb *r14,*r4+
       movb *r14,*r4+
       movb *r14,*r4+
       dec  r3
       jne  vdp_to_vdp_copy_fast_2
*      Write block
       swpb r1
       movb r1,@vdpwa
       swpb r1
       movb r1,@vdpwa
       li   r3,buffer_size/4
       li   r4,buffer
vdp_to_vdp_copy_fast_3:
       movb *r4+,*r15
       movb *r4+,*r15
       movb *r4+,*r15
       movb *r4+,*r15
       dec  r3
       jne  vdp_to_vdp_copy_fast_3
       ai   r0,buffer_size
       ai   r1,buffer_size
       dec  r2
       jne  vdp_to_vdp_copy_fast_1
       rt
*// vdp_to_vdp_copy_fast

*********************************************************************
*
* Includes
*
       copy "unlz4-vdp.a99"
       copy "sound-player.a99"
       copy "sound-fx.a99"
       copy "music-player.a99"
       copy "obstacles-music.a99"
       copy "bipbop-music.a99"
maps:
       data map0,map0_end-map0
       data map1,map1_end-map1
       data map2,map2_end-map2
       data map3,map3_end-map3
       data map4,map4_end-map4
       data map5,map5_end-map5
       data map6,map6_end-map6
       data map7,map7_end-map7
       data map8,map8_end-map8
map0:
       bcopy "maps/map0trim.lz4"
map0_end
       even
map1:
       bcopy "maps/map1trim.lz4"
map1_end
       even
map2:
       bcopy "maps/map2trim.lz4"
map2_end
       even
map3:
       bcopy "maps/map3trim.lz4"
map3_end
       even
map4:
       bcopy "maps/map4trim.lz4"
map4_end
       even
map5:
       bcopy "maps/map5trim.lz4"
map5_end
       even
map6:
       bcopy "maps/map6trim.lz4"
map6_end
       even
map7:
       bcopy "maps/map7trim.lz4"
map7_end
       even
map8:
       bcopy "maps/map9trim.lz4"
map8_end
       even





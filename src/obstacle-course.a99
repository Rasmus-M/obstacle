*********************************************************************
*
* Obstacles course
* For the TI-99/4A home computer
*
* January 2019
* Rasmus Moustgaard <rasmus.moustgaard@gmail.com>
*
*********************************************************************

**
* Memory mapped addresses
*
vdpwd  equ  >8c00                      ; VDP write data
vdpwa  equ  >8c02                      ; VDP set read/write address
vdprd  equ  >8800                      ; VDP read data
vdpsta equ  >8802                      ; VDP status
sound  equ  >8400
grmrd  equ  >9800                      ; GROM read data (GROM base)
grmra  equ  >9802                      ; GROM read address+1
grmwd  equ  >9C00
grmwa  equ  >9C02

**
* VDP memory map
*
ptrntb equ  >0000                      ; Pattern table base
nametb equ  >0400                      ; Name table base 1
spratb equ  >0700                      ; Sprite attribute table base
colrtb equ  >0780                      ; Color table base
ptrnt2 equ  >0800                      ; Patterns
namet2 equ  >0c00                      ; Name table base 2
ptrnt3 equ  >1000                      ; Patterns
sprptb equ  >1000                      ; Sprite pattern table base (only from >1400, 32 patterns)
ptrnt4 equ  >1800                      ; Patterns
freev1 equ  >1c00                      ; 1k free
ptrnt5 equ  >2000                      ; Patterns
vmap0  equ  >2400                      ; Map
ptrnt6 equ  >2800                      ; Patterns
vmap1  equ  >2c00                      ; Map
ptrnt7 equ  >3000                      ; Patterns
vmap2  equ  >3400                      ; Map
ptrnt8 equ  >3800                      ; Patterns
vmap3  equ  >3c00                      ; Map

**
* Constants
*
bank_0:
       equ  >6002
bank_1:
       equ  >6000
trampoline_code_size:
       equ  18
scroll_speed_normal:
       equ  >0100
scroll_speed_slow:
       equ  >0080
map_width:
       equ  256
map_height:
       equ  16
map_size:
       equ  map_width*map_height
screen_width:
       equ  32
buffer_size:
       equ  32
log_2_buffer_size:
       equ  5
n_sprite_patterns:
       equ  18
chr_space:
       equ  96
chr_zero:
       equ  101
chr_qst_mark:
       equ  112
n_lives:
       equ  3
n_levels:
       equ  4
start_level:
       equ  1

**
* Scratch pad
*
rndsd  equ  >83c0                      ; Random number seed
pad    equ  >8300
wrksp  equ  pad                        ; Workspace
r0lb   equ  wrksp+1                    ; r0 low byte required for VDP routines
r1lb   equ  wrksp+3
r2lb   equ  wrksp+5
r3lb   equ  wrksp+7
r4lb   equ  wrksp+9
r5lb   equ  wrksp+11
r6lb   equ  wrksp+13
r7lb   equ  wrksp+15
r8lb   equ  wrksp+17
r9lb   equ  wrksp+19
stack  equ  wrksp+>20                  ; Stack (grows up)
padvar equ  stack+>18                  ; Start of pad variables

**
* PAD variables
*
level:
       equ  padvar
lives:
       equ  level+2
score:
       equ  lives+2
disp_score:
       equ  score+2
status:
       equ  disp_score+2
demo:
       equ  status+2
frame:
       equ  demo+2
scroll_x:                              ; Scroll offset in FP 12.4
       equ  frame+2
scroll_x_pixels:                       ; Scroll offset in pixels
       equ  scroll_x+2
scroll_vx:                             ; FP 8.8
       equ  scroll_x_pixels+2
ball_x:                                ; FP 8.8
       equ  scroll_vx+2
ball_vx:                               ; FP 8.8
       equ  ball_x+2
ball_vx_last:                          ; FP 8.8
       equ  ball_vx+2
ball_y:                                ; FP 8.8
       equ  ball_vx_last+2
ball_vy:                               ; FP 8.8
       equ  ball_y+2
ball_ay:                               ; FP 8.8
       equ  ball_vy+2
ball_pattern_color:
       equ  ball_ay+2
ball_animation_ptr:
       equ  ball_pattern_color+2
ball_animation_count:
       equ  ball_animation_ptr+2
ball_rebounce:
       equ  ball_animation_count+2
points_sprite_y:
       equ  ball_rebounce+2
points_sprite_x:
       equ  points_sprite_y+2
points_sprite_pattern_color:
       equ  points_sprite_x+2
sfx_addr_1:                            ; Sound fx address channel 1
       equ  points_sprite_pattern_color+2
sfx_addr_2:                            ; Sound fx address channel 2
       equ  sfx_addr_1+2
sfx_addr_3:                            ; Sound fx address channel 3
       equ  sfx_addr_2+2
sfx_addr_4:                            ; Sound fx address channel 4
       equ  sfx_addr_3+2
sfx_duration_1:                        ; Sound fx counter channel 1
       equ  sfx_addr_4+2
sfx_duration_2:                        ; Sound fx counter channel 2
       equ  sfx_duration_1+2
sfx_duration_3:                        ; Sound fx counter channel 3
       equ  sfx_duration_2+2
sfx_duration_4:                        ; Sound fx counter channel 4
       equ  sfx_duration_3+2
sfx_attn_1:                            ; Sound fx attenuation channel 1
       equ  sfx_duration_4+2
sfx_attn_2:                            ; Sound fx attenuation channel 2
       equ  sfx_attn_1+2
sfx_attn_3:                            ; Sound fx attenuation channel 3
       equ  sfx_attn_2+2
sfx_attn_4:                            ; Sound fx attenuation channel 4
       equ  sfx_attn_3+2
sfx_freq_1:                            ; Sound fx frequency channel 1
       equ  sfx_attn_4+2
sfx_freq_2:                            ; Sound fx frequency channel 2
       equ  sfx_freq_1+2
sfx_freq_3:                            ; Sound fx frequency channel 3
       equ  sfx_freq_2+2
sfx_freq_4:                            ; Sound fx frequency channel 4
       equ  sfx_freq_3+2
buffer:
       equ  sfx_freq_4+2
bank_0_exec:
       equ  buffer+buffer_size
bank_1_exec:
       equ  bank_0_exec+trampoline_code_size
pad_max:
       equ  bank_1_exec+trampoline_code_size

**
* Macros
*
       .defm proc
       mov  r11,*r10+
       .endm

       .defm endproc
       dect r10
       mov  *r10,r11
       b    *r11
       .endm

       .defm push
       mov  #1,*r10+
       .endm

       .defm pop
       dect r10
       mov  *r10,#1
       .endm

       .defm peek
       mov  @-2(r10),#1
       .endm

**
* Cartridge banks
*
       copy "bank0.a99"

vdp_to_vdp_copy_fast_bank0:
       equ  vdp_to_vdp_copy_fast

       copy "bank1.a99"

copy_map_to_vdp_bank1:
       equ  copy_map_to_vdp
upload_sprite_patterns_bank1:
       equ  upload_sprite_patterns

       end

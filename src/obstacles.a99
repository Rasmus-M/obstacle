*********************************************************************
*
* Obstacles course
* For the TI-99/4A home computer
*
* January 2019
* Rasmus Moustgaard <rasmus.moustgaard@gmail.com>
*
*********************************************************************

**
* Memory mapped addresses
*
vdpwd  equ  >8c00                      ; VDP write data
vdpwa  equ  >8c02                      ; VDP set read/write address
vdprd  equ  >8800                      ; VDP read data
vdpsta equ  >8802                      ; VDP status
sound  equ  >8400

**
* VDP memory map
*
ptrntb equ  >0000                      ; Pattern table base
nametb equ  >0400                      ; Name table base
spratb equ  >0700                      ; Sprite attribute table base
colrtb equ  >0780                      ; Color table base
sprptb equ  >1000                      ; Sprite pattern table base
vmap0  equ  >2400
vmap1  equ  >2c00
vmap2  equ  >3400
vmap3  equ  >3c00

**
* Constants
*
map_width:
       equ  256
map_height:
       equ  16
map_size:
       equ  map_width*map_height
screen_width:
       equ  32
buffer_size:
       equ  32
log_2_buffer_size:
       equ  5

**
* Scratch pad
*
rndsd  equ  >83c0                      ; Random number seed
pad    equ  >8300
wrksp  equ  pad                        ; Workspace
r0lb   equ  wrksp+1                    ; r0 low byte required for VDP routines
r1lb   equ  wrksp+3
r2lb   equ  wrksp+5
r3lb   equ  wrksp+7
r4lb   equ  wrksp+9
r5lb   equ  wrksp+11
r6lb   equ  wrksp+13
r7lb   equ  wrksp+15
r8lb   equ  wrksp+17
r9lb   equ  wrksp+19
stack  equ  wrksp+>20                  ; Stack (grows up)
padvar equ  stack+>10                  ; Start of pad variables

**
* PAD variables
*
scroll_x:
       equ  padvar
buffer:
       equ  scroll_x+2
pad_max:
       equ  buffer+buffer_size

**
* Macros
*
       .defm proc
       mov  r11,*r10+
       .endm

       .defm endproc
       dect r10
       mov  *r10,r11
       b    *r11
       .endm

       .defm push
       mov  #1,*r10+
       .endm

       .defm pop
       dect r10
       mov  *r10,#1
       .endm

       .defm peek
       mov  @-2(r10),#1
       .endm

***************************************************************
*
       def  main
       aorg >6000

***************************************************************
*
* Cartridge header
*
header:
       byte >AA,1,1,0
       data 0
       data program
       data 0,0
program:
       data 0
       data main
       byte 16
       text 'OBSTACLES COURSE'

***************************************************************
*
* Main program
*
main:
       limi 0                          ; Interrupts off
       lwpi wrksp                      ; Setup workspace
       li   r10,stack                  ; Setup stack pointer
       li   r15,vdpwd                  ; Do not change
       bl   @graphics_mode
       bl   @copy_map_to_vdp
       bl   @scroll_patterns
       clr  @scroll_x
       bl   @update_full_name_table
loop:
       bl   @vsync
*      Set pattern table
       mov  @scroll_x,r0
       andi r0,>0007
       ori  r0,>0400
       bl   @vwtr
*      Set name table
       mov  @scroll_x,r0
       andi r0,>0008
       srl  r0,2
       inc  r0
       ori  r0,>0200
       bl   @vwtr
*      Update name table
       bl   @update_partial_name_table
*      Next
       inc  @scroll_x
       jmp  loop

*********************************************************************
*
* Wait for vertical retrace (CRU)
*
vsync:
       clr  r12
vsync_1:
       tb   2                          ; Test CRU bit for VDP interrupt
       jeq  vsync_1
       movb @vdpsta,r12
       rt
*// vsync

***************************************************************
*
* Update full name table
*
update_full_name_table:
       .proc
*      Dest
       li   r1,nametb
*      Source
       mov  @scroll_x,r5               ; Column offset
       srl  r5,3
       li   r6,map_row_source_table
*      Copy
       li   r7,map_height
       bl   @copy_map_rows_from_vdp_custom
       .endproc
*// update_full_name_table

***************************************************************
*
* Update 1/8 name table
*
update_partial_name_table:
       .proc
       mov  @scroll_x,r6
       andi r6,>0007
       sla  r6,1
       li   r7,2
       bl   @copy_map_rows_from_vdp
       .endproc
*// update_partial_name_table

***************************************************************
*
* Update name table rows
*
update_name_table_rows:
       li   r0,vdpwd
update_name_table_rows_1:
       li   r2,screen_width/4
update_name_table_rows_2:
       movb *r1+,*r0
       movb *r1+,*r0
       movb *r1+,*r0
       movb *r1+,*r0
       dec  r2
       jne  update_name_table_rows_2
       ai   r1,map_width-screen_width
       dec  r3
       jne  update_name_table_rows_1
       rt
*// update_name_table_rows

***************************************************************
*
* Copy map rows from VDP RAM
*
* r6: Start row number to copy
* r7: Number of rows to copy
*
copy_map_rows_from_vdp:
       .proc
*      Dest
       mov  @scroll_x,r1               ; Calculate current name table address
       inv  r1
       andi r1,>0008
       sla  r1,8
       ai   r1,nametb
       mov  r6,r0                      ; Row offset
       sla  r0,5
       a    r0,r1
*      Source
       mov  @scroll_x,r5               ; Column offset
       srl  r5,3
       inc  r5                         ; Plus one
       sla  r6,1                       ; Lookup table address
       ai   r6,map_row_source_table
       jmp  copy_map_rows_from_vdp_1
copy_map_rows_from_vdp_custom:
       .proc
copy_map_rows_from_vdp_1:
       mov  *r6+,r0                    ; Row start
       a    r5,r0                      ; Add column offset
       li   r2,screen_width
       bl   @vdp_to_vdp_copy           ; Copy row
       dec  r7
       jne  copy_map_rows_from_vdp_1
       .endproc
*// copy_map_rows_from_vdp

***************************************************************
*
* Unpack and copy map to VDP RAM
*
copy_map_to_vdp:
       .proc
       li   r0,>1000
       li   r1,MD0
       li   r2,map_size
       bl   @vmbw
       li   r0,>1000
       li   r1,vmap0
       li   r2,>400
       bl   @vdp_to_vdp_copy
       li   r0,>1400
       li   r1,vmap1
       li   r2,>400
       bl   @vdp_to_vdp_copy
       li   r0,>1800
       li   r1,vmap2
       li   r2,>400
       bl   @vdp_to_vdp_copy
       li   r0,>1c00
       li   r1,vmap3
       li   r2,>400
       bl   @vdp_to_vdp_copy
       .endproc
*// copy_map_to_vdp

***************************************************************
*
* Scroll patterns horizontally and upload to VDP
*
scroll_patterns:
       .proc
       li   r4,TCHARS                  ; Pointer to from/to pattern numbers
*      Pattern loop
       clr  r2                         ; Pattern counter
scroll_patterns_1:
*      Scroll offset loop
       clr  r3                         ; Horizontal scroll offset (0-7)
scroll_patterns_2:
       mov  *r4,r5                    ; Get from and to pattern numbers
       jlt  scroll_patterns_5
       mov  r5,r6
       andi r5,>ff00
       swpb r5
       sla  r5,3
       ai   r5,pat0                    ; Address of from pattern
       andi r6,>00ff
       sla  r6,3
       ai   r6,pat0                    ; Address of to pattern
*      Write address
       mov  r2,r0                      ; Pattern number
       sla  r0,3                       ; Multiply by 8
       mov  r3,r1                      ; Scroll offset
       sla  r1,11                      ; Multiply by >800
       a    r1,r0                      ; Add to pattern offset
       bl   @vwad                      ; Setup write address
*      Row loop
       li   r7,8                       ; Row counter
scroll_patterns_3:
       movb *r5+,r1                    ; Get from byte
       movb *r6+,@r1lb                 ; Get to byte
       mov  r3,r0                      ; Get scroll offset
       jeq  scroll_patterns_4          ; Skip shift if zero
       sla  r1,0
scroll_patterns_4:
       movb r1,@vdpwd                  ; Send to VDP
*      Next row
       dec  r7
       jne  scroll_patterns_3
*      Next scroll offset
       inc  r3
       ci   r3,8
       jlt  scroll_patterns_2
*      Next pattern
scroll_patterns_5:
       inct r4
       inc  r2
       c    r2,@TCHNUM                      ;
       jlt  scroll_patterns_1
       .endproc
*// scroll_patterns

*********************************************************************
*
* Set graphics mode
*
graphics_mode:
       .proc
       clr  r0
       li   r1,vregs2
       li   r2,8
graphics_mode_1:
       movb *r1+,@r0lb
       bl   @vwtr                      ; Set register
       ai   r0,>0100
       dec  r2
       jne  graphics_mode_1
*      Clear VDP RAM
       clr  r0
       clr  r1
       li   r2,>4000
       bl   @vsmw
*      Colors
       li   r0,colrtb
       li   r1,CLRSET
       mov  @CLRNUM,r2
       bl   @vmbw
*      Sprite attributes
       li   r0,spratb
       li   r1,>d000
       bl   @vsbw
*      Return
       .endproc
*      VDP registers
vregs2:
       byte >00                        ; Graphics I mode
       byte >e2                        ; 16K, display on, interrupt enabled
       byte nametb/>400                ; Name table
       byte colrtb/>40                 ; Color table
       byte ptrntb/>800                ; Pattern table
       byte spratb/>80                 ; Sprite attribute table
       byte sprptb/>800                ; Sprite pattern table
       byte >01                        ; Backdrop color
*// graphics_mode

*********************************************************************
*
* VDP to VDP copy
*
* r0: Source address
* r1: Destination address
* r2: Number of bytes to copy (must be a multiple of buffer_size)
*
* Modifies r0-r4. On return r0 and r1 are incremented by r2 bytes.
*
vdp_to_vdp_copy:
       ori  r1,>4000                   ; Prepare write address
       srl  r2,log_2_buffer_size
vdp_to_vdp_copy_1:
*      Read block
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM read address
       swpb r0
       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
       li   r3,buffer_size/4
       li   r4,buffer
vdp_to_vdp_copy_2:
       movb @vdprd,*r4+
       movb @vdprd,*r4+
       movb @vdprd,*r4+
       movb @vdprd,*r4+
       dec  r3
       jne  vdp_to_vdp_copy_2
*      Write block
       swpb r1
       movb r1,@vdpwa
       swpb r1
       movb r1,@vdpwa
       li   r3,buffer_size/4
       li   r4,buffer
vdp_to_vdp_copy_3:
       movb *r4+,@vdpwd
       movb *r4+,@vdpwd
       movb *r4+,@vdpwd
       movb *r4+,@vdpwd
       dec  r3
       jne  vdp_to_vdp_copy_3
       ai   r0,buffer_size
       ai   r1,buffer_size
       dec  r2
       jne  vdp_to_vdp_copy_1
       rt
*// vdp_to_vdp_copy

*********************************************************************
*
* VDP Write To Register
*
* R0 MSB: VDP register to write to
* R0 LSB: Value to write
*
vwtr:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte (value) to write to VDP register
       swpb r0
       ori  r0,>8000                   ; Set up a VDP register write operation (10)
       movb r0,@vdpwa                  ; Send high byte (address) of VDP register
       rt
*// vwtr

*********************************************************************
*
* VDP Set Write Address
*
* R0: Write address in VDP RAM
*
* R0 is modified, but can be restored with: ANDI R0,>3FFF
*
vwad:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       rt
*// vwad

*********************************************************************
*
* VDP Set Read Address
*
* R0: Read address in VDP RAM
*
vrad:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM read address
       swpb r0
       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
       rt
*// vrad

*********************************************************************
*
* VDP Single Byte Read
*
* R0:  Read address in VDP RAM
* R1:  MSB of R1 set to byte from VDP RAM
*
vsbr:
       movb @r0lb,@vdpwa               ; Send low byte of VDP RAM write address
       andi r0,>3fff
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       movb @vdprd,r1                  ; Read byte from VDP RAM
       rt
*// vsbr

*********************************************************************
*
* VDP Single Byte Write
*
* R0: Write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
*
* R0 is modified, but can be restored with: ANDI R0,>3FFF
*
vsbw:
       movb  @r0lb,@vdpwa              ; Send low byte of VDP RAM write address
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       movb r1,*15                     ; Write byte to VDP RAM
       rt
*// vsbw

*********************************************************************
*
* VDP multiple Byte Write
*
* R0: Write address in VDP RAM
* R1: Starting read address in CPU RAM
* R2: Number of bytes to send
*
* R0 is modified, but can be restored with: ANDI R0,>3FFF
*
vmbw:
       movb  @r0lb,@vdpwa              ; Send low byte of VDP RAM write address
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
vmbw_1:
       movb *r1+,*15                   ; Write byte to VDP RAM
       dec  r2
       jne  vmbw_1
       rt
*// vmbw

*********************************************************************
*
* VDP Single Byte Multiple Write
*
* R0: Write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
* R2: Number of bytes to write to VDP RAM
*
* R0 is modified, but can be restored with: ANDI R0,>3FFF
*
vsmw:
       movb  @r0lb,@vdpwa              ; Send low byte of VDP RAM write address
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
vsmw_1:
       movb r1,*15                     ; Write byte to VDP RAM
       dec  r2                         ; Byte counter
       jne  vsmw_1
       rt
*// vsmw

*********************************************************************
*
* VDP Multiple Byte Read
*
* R0: Starting read address in VDP RAM
* R1: Starting write address in CPU RAM
* R2: Number of bytes to read from VDP RAM
*
* Modifies R0-R2
*
vmbr:
       movb  @r0lb,@vdpwa              ; Send low byte of VDP RAM write address
       andi r0,>3fff
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       li   r0,vdprd
vmbr_1:
       movb *r0,*r1+                   ; Read byte from VDP RAM
       dec  r2                         ; Byte counter
       jne  vmbr_1                     ; Check if finished
       rt
*// vmbr

*********************************************************************
*
* Data
*
map_row_source_table:
       data vmap0,vmap0+>100,vmap0+>200,vmap0+>300
       data vmap1,vmap1+>100,vmap1+>200,vmap1+>300
       data vmap2,vmap2+>100,vmap2+>200,vmap2+>300
       data vmap3,vmap3+>100,vmap3+>200,vmap3+>300

*********************************************************************
*
* Includes
*
       copy "map.a99"

       end

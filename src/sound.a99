*********************************************************************
*
* Mute sound
*
mute_sound:
       li   r0,mute_table              ; Mute all
       li   r2,4
mute_sound_1:
       movb *r0+,@sound
       dec  r2
       jne  mute_sound_1
       li   r0,sfx_addr_1
       clr  *r0+
       clr  *r0+
       clr  *r0+
       clr  *r0
*      Return
       rt
mute_table:
       byte >9f, >bf, >df, >ff
*// mute_sound

*********************************************************************
*
* Play star
*
play_star:
       li   r0,sfx_star
       li r1,2
       jmp  play_sfx
*// play_star

*********************************************************************
*
* Play jump
*
play_jump:
       li   r0,sfx_jump
       li r1,4
       jmp  play_sfx
*// play_axe

*********************************************************************
*
* Play long jumo
*
play_long_jump:
       li   r0,sfx_long_jump
       li   r1,4
       jmp  play_sfx
*// play_bomb

*********************************************************************
*
* Play die
*
play_die:
       li   r0,sfx_die
       li   r1,6
       jmp  play_sfx
*// play_die

*********************************************************************
*
* Play sound fx
*
* r0: Contains address of sound fx to play
* r1: Channel offset (0 = channel 1, 2 = channel 2, 4 = channel 3, 6 = channel 4)
*
* Modifies r0-r2
*
play_sfx:
       .proc
       mov  r0,@sfx_addr_1(r1)
       movb *r0+,@sfx_duration_1+1(r1) ; Duration (assume MSB is zero)
       movb *r0+,r2                    ; Operation
       movb *r0+,@sfx_attn_1(r1)       ; Init attenuation
       ci   r2,>e000                   ; Test for noise
       jhe  play_sfx_1                 ; Yes - skip frequency
       inc  r0                         ; Skip attenuation step
       movb *r0,@sfx_freq_1(r1)        ; Init frequency
play_sfx_1:
       movb r2,@sound                  ; Write operation
       bl   @sfx_player                ; Play first note
       .endproc
       rt

*********************************************************************
*
* Sound fx player
*
* Modifies r0-r3
*
sfx_player:
       .push r4
       li   r1,sound
       li   r2,6
sfx_player_1:
       mov  @sfx_addr_1(r2),r3         ; Is channel active?
       jeq  sfx_player_4               ; No - do next
       movb @sfx_operation(r3),r0      ; Get operation
       mov  @sfx_duration_1(r2),r4     ; Are we done?
       jgt  sfx_player_2               ; No - jump
       clr  @sfx_addr_1(r2)            ; Finished - clear sound address
       ori  r0,>1f00                   ; Full attenuation
       movb r0,*r1                     ; Mute
       jmp  sfx_player_4               ; Return
sfx_player_2:
       ci   r0,>e000                   ; Noise?
       jhe  sfx_player_3               ; Yes, skip op
       mov  @sfx_freq_step(r3),r4      ; Check frequency step
       jeq  sfx_player_3               ; If zero skip operation
       movb r0,*r1                     ; Write op and lower frequency nybble=0
       movb @sfx_freq_1(r2),r4         ; Get frequency x 4
       srl  r4,2                       ; Frequency
       movb r4,*r1                     ; Write frequency
sfx_player_3:
       andi r0,>f000                   ; Operation
       ori  r0,>1000                   ; Change operation to attenuation
       movb @sfx_attn_1(r2),r4         ; Get attenuation x 16
       srl  r4,4                       ; Attenuation
       socb r4,r0                      ; Combine with operation
       movb r0,*r1                     ; Write attenuation
       ab   @sfx_freq_step(r3),@sfx_freq_1(r2)    ; Change frequency
       ab   @sfx_attn_step(r3),@sfx_attn_1(r2)    ; Change attenuation
       dec  @sfx_duration_1(r2)        ; Count down duration
sfx_player_4:
       dect r2                         ; Next channel
       jgt  sfx_player_1               ; Loop
       jeq  sfx_player_1               ; Loop
       .pop r4
       rt                              ; Return

* Sound FX structure
sfx_duration:                          ; Number of frames
       equ  0
sfx_operation:                         ; 80=T1, A0=T2, C0=T3, E4=W0, E5=W1, E6=W2
       equ  1
sfx_attn_start:                        ; 0-255
       equ  2
sfx_attn_step:                         ; Signed
       equ  3
sfx_freq_start:                        ; 0-255, n/a for noise                                ;
       equ  4
sfx_freq_step:                         ; Signed, n/a for noise
       equ  5

T1     equ  >80
T2     equ  >A0
T3     equ  >C0
W0     equ  >E4
W1     equ  >E5
W2     equ  >E6

sfx_star:
       byte 64                         ; Frames
       byte T2
       byte 0                          ; Attn start
       byte 4                          ; Attn step
       byte 16                         ; Freq start
       byte 0                          ; Freq step
sfx_jump:
       byte 8                          ; Frames
       byte T3
       byte 0                          ; Attn start
       byte 8                          ; Attn step
       byte 80                         ; Freq start
       byte -12                        ; Freq step
sfx_long_jump:
       byte 32                         ; Frames
       byte T3
       byte 0                          ; Attn start
       byte 1                          ; Attn step
       byte 80                         ; Freq start
       byte -2                         ; Freq step
sfx_die:
       byte 64                         ; Frames
       byte W1
       byte 0                          ; Attn start
       byte 4                          ; Attn step

*********************************************************************
*
* Mute sound
*
mute_sound:
       li   r0,mute_table              ; Mute all
       li   r2,4
mute_sound_1:
       movb *r0+,@sound
       dec  r2
       jne  mute_sound_1
       clr  @snd_channel_1
       clr  @snd_channel_2
       clr  @snd_channel_3
*      Return
       rt
mute_table:
       byte >9f, >bf, >df, >ff
*// mute_sound

*********************************************************************
*
* Play jump
*
play_jump:
       rt
       li   r0,snd_jump
       li   r1,snd_channel_1
       jmp  play_snd
*// play_axe

*********************************************************************
*
* Play long jump
*
play_long_jump:
       li   r0,snd_long_jump
       li   r1,snd_channel_1
       jmp  play_snd
*// play_bomb

*********************************************************************
*
* Play star
*
play_star:
       li   r0,snd_star
       li   r1,snd_channel_2
       jmp  play_snd
*// play_star

*********************************************************************
*
* Play slow
*
play_slow:
       li   r0,snd_slow
       li   r1,snd_channel_2
       jmp  play_snd
*// play_slow

*********************************************************************
*
* Play normal
*
play_normal:
       li   r0,snd_normal
       li   r1,snd_channel_2
       jmp  play_snd
*// play_normal

*********************************************************************
*
* Play die
*
play_die:
       li   r0,snd_die
       li   r1,snd_channel_3
       jmp  play_snd
*// play_die

*********************************************************************
*
* Play sound
*
* r0: Address of sound to play
* r1: Channel address
* r2: Frequency, or zero if taken from sound definition
*
* Modifies r0-r4
*
play_snd:
       clr  r2
play_snd_0:
       mov  r0,*r1+                    ; Init address
       movb *r0+,r4                    ; Operation
       movb *r0+,*r1+                  ; Init duration
       movb *r0+,*r1+                  ; Init attenuation
       inc  r0                         ; Skip attenuation step byte
       ci   r4,>e000                   ; Test for noise
       jl   play_snd_1
*      Noise - init PSG
       movb r4,@sound
       ori  r4,>1f00                   ; Change operation to full attenuation
       movb r4,@sound
       jmp  play_snd_3
*      Tone
play_snd_1:
       movb r2,r3                      ; Frequency
       jne  play_snd_2
       movb *r0,r3                     ; Get frequency from sound definition
play_snd_2:
       movb r3,*r1                     ; Init frequency
       inc  r0
       movb *r0,r1                     ; Frequency step
       jne  play_snd_3
*      Tone - init PSG
       srl  r3,2                       ; Frequency MSB
       movb @r3lb,r1                   ; Copy least significant frequency bits
       andi r1,>c000
       srl  r1,4                       ; Shift to lower nybble
       socb r1,r4                      ; Combine with operation
       movb r4,@sound
       movb r3,@sound
       ori  r4,>1f00                   ; Change operation to full attenuation
       movb r4,@sound
play_snd_3:
       rt

*********************************************************************
*
* Sound player
*
* Modifies r0-r4
*
snd_player:
       li   r2,snd_channel_3           ; Start with last channel
snd_player_1:
       mov  *r2,r3                     ; Get sound address
       jeq  snd_player_4               ; If not active do next
       movb *r3,r4                     ; Get operation
       movb @snd_channel_duration(r2),r0     ; Are we done?
       jne  snd_player_2               ; No - jump
*      Sound finished
       clr  *r2                        ; Finished - clear sound address
       ori  r4,>1f00                   ; Full attenuation
       movb r4,@sound                  ; Mute
       jmp  snd_player_4               ; Return
snd_player_2:
*      Check noise or tone
       ci   r4,>e000                   ; Noise?
       jhe  snd_player_3               ; Yes, skip operation
       movb @snd_freq_step(r3),r0      ; Check frequency step
       jeq  snd_player_3               ; If zero skip operation
*      Frequency
       movb @snd_channel_freq(r2),r0   ; Get frequency x 4
       srl  r0,2                       ; Frequency MSB
       movb @r0lb,r1                   ; Copy least significant frequency bits
       andi r1,>c000
       srl  r1,4                       ; Shift to lower nybble
       socb r4,r1                      ; Combine with operation
       movb r1,@sound                  ; Write operation and lower frequency nybble
       movb r0,@sound                  ; Write frequency
*      Attenuation
snd_player_3:
       andi r4,>f000                   ; Clear operation lower nybble
       ori  r4,>1000                   ; Change operation to attenuation
       movb @snd_channel_attn(r2),r0   ; Get attenuation x 16
       srl  r0,4                       ; Attenuation
       socb r4,r0                      ; Combine with attenuation operation
       movb r0,@sound                  ; Write attenuation
*      Change and loop
       ab   @snd_freq_step(r3),@snd_channel_freq(r2)    ; Change frequency
       ab   @snd_attn_step(r3),@snd_channel_attn(r2)    ; Change attenuation
       sb   @snd_byte_01,@snd_channel_duration(r2)      ; Count down duration
snd_player_4:
       ai   r2,-snd_channel_size       ; Next (previous) channel
       ci   r2,snd_channel_1           ; Are we done?
       jhe  snd_player_1               ; No - loop
       rt                              ; Return
snd_byte_01:
       byte >01
**
* Sound structure
*
snd_operation:                         ; 80=T1, A0=T2, C0=T3, E4=W0, E5=W1, E6=W2
       equ  0
snd_duration:                          ; Number of frames
       equ  1
snd_attn_start:                        ; 0-255
       equ  2
snd_attn_step:                         ; Signed
       equ  3
snd_freq_start:                        ; 0-255, n/a for noise                                ;
       equ  4
snd_freq_step:                         ; Signed, n/a for noise
       equ  5

**
* Operations
*
T1     equ  >80                        ; Tone generator 1
T2     equ  >A0                        ; Tone generator 2
T3     equ  >C0                        ; Tone generator 3
W0     equ  >E4                        ; White noise type 0
W1     equ  >E5                        ; White noise type 1
W2     equ  >E6                        ; White noise type 2

**
* Sounds
*
snd_jump:
       byte T1
       byte 16                         ; Frames
       byte 0                          ; Attn start
       byte 16                         ; Attn step
       byte 140                        ; Freq start
       byte -2                         ; Freq step
snd_long_jump:
       byte T1
       byte 32                         ; Frames
       byte 0                          ; Attn start
       byte 8                          ; Attn step
       byte 140                        ; Freq start
       byte -4                         ; Freq step
snd_star:
       byte T2
       byte 64                         ; Frames
       byte 0                          ; Attn start
       byte 4                          ; Attn step
       byte 16                         ; Freq start
       byte 0                          ; Freq step
snd_slow:
       byte T3
       byte 32                         ; Frames
       byte 0                          ; Attn start
       byte 4                          ; Attn step
       byte 16                         ; Freq start
       byte 6                          ; Freq step
snd_normal:
       byte T3
       byte 32                         ; Frames
       byte 0                          ; Attn start
       byte 4                          ; Attn step
       byte 208                        ; Freq start
       byte -6                         ; Freq step
snd_die:
       byte W0
       byte 64                         ; Frames
       byte 0                          ; Attn start
       byte 4                          ; Attn step


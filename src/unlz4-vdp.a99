* LZ4 decompressor for 9900
* Ported by Tursi from LZ4 data decompressor for Apple II
* by Peter Ferrie (peter.ferrie@gmail.com)

* due to changing VDP address every byte, this function is
* much slower than any of the CPU involved ones.

* unpacker variables, no need to change these
* for now we'll just use registers
*
* r0: src
* r1: dst
* r2: end
* r3: a
* r4: b
* r5: count
* r6: delta
* r7: temp
* r8: temp2
* r9: return
* r12: return2
* r13: vaddr
* r14: vread
* r15: vwrite

* Unpacker entrypoint
* Caller must set a VDP read address and disable interrupts
* r0 = src address
* r1 = destination address
* r2 = end of packed data

unpack_lz4_from_to_vdp:
       mov  r11,r9                     ; remember return address

parse_token:
       bl   @set_src
       movb *r14,r3                    ; read a token byte
       inc  r0
       movb r3,r4                      ; save it off for later
       srl  r3,12                      ; make a counter out of the literal count MS nibble
       jeq  copy_matches               ; if it's zero, go to the match copy

       bl   @build_count               ; check for additional bytes of length
       bl   @do_copy                   ; we know the src, dest, and count, so do it

       bl   @speak                     ; Speak when needed

       c    r0,r2                      ; see if we're done yet (only place src advances)
       jl   copy_matches               ; skip over if not done and work on the back reference

       b    *r9                        ; back to caller

copy_matches:
       bl   @set_src
       movb *r14,r6                    ; getsrc -> lsb (sadly it can be unaligned)
       swpb r6
       movb *r14,r6                    ; getsrc -> msb - this gives us the offset
       inct r0
       mov  r4,r3                      ; get the token back
       andi r3,>0f00                   ; get the reference count from the token
       srl  r3,8                       ; make it a count
       bl   @build_count               ; check for additional bytes of length
    
       ai   r5,4                       ; reference length always adds 4 bytes
       mov  r0,r7                      ; save the current compressed source address
       mov  r1,r0                      ; get the current destination pointer
       s    r6,r0                      ; and subtract the delta
       bl   @do_copy                   ; we have src, dest, and count, do the copy
       mov  r7,r0                      ; restore the compressed pointer
       jmp  parse_token                ; and go parse the next token

do_copy:
       mov  r11,r12
do_copy2:
       bl   @set_src
       movb *r14,r8                    ; read one byte
       inc  r0
       bl   @set_dest
       movb r8,*r15                    ; write one byte
       inc  r1
       dec  r5                         ; count down
       jne  do_copy2                   ; loop if not done
       b    *r12                       ; return if we are

* start with a count in 'a', build an actual count in 'count'
build_count:
       mov  r11,r12
       mov  r3,r5                      ; store the count
       ci   r5,15                      ; if it's not 15, we're done
       jne  bc2
bc1:
       bl   @set_src
       movb *r14,r3                    ; get the next byte
       inc  r0
       srl  r3,8                       ; make it a count
       a    r3,r5                      ; add it in
       ci   r3,255                     ; check if there are more
       jeq  bc1                        ; there are
bc2:
       b    *r12                       ; else we're done

* set src as the VDP read address
set_src:
       mov  r0,r13
       jmp  vdpwadr
    
* set dest as the VDP write address
set_dest:
       mov  r1,r13
       ori  r13,>4000
       jmp  vdpwadr

* set VDP address as per vaddr
vdpwadr:
       swpb r13
       movb r13,@vdpwa
       swpb r13
       movb r13,@vdpwa
       rt
